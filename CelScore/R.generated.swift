// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generateted, and contains references to static resources.
struct R {
  struct color {
    private init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `icomoon.ttf`.
    static let icomoonTtf = FileResource(bundle: _R.hostingBundle, name: "icomoon", pathExtension: "ttf")
    
    /// `bundle.URLForResource("icomoon", withExtension: "ttf")`
    static func icomoonTtf(_: Void) -> NSURL? {
      let fileResource = R.file.icomoonTtf
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    private init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font {
    /// Font `icomoon`.
    static let icomoon = FontResource(fontName: "icomoon")
    
    /// `UIFont(name: "icomoon", size: ...)`
    static func icomoon(size size: CGFloat) -> UIFont? {
      return UIFont(resource: icomoon, size: size)
    }
    
    private init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 41 images.
  struct image {
    /// Image `astronaut_green`.
    static let astronaut_green = ImageResource(bundle: _R.hostingBundle, name: "astronaut_green")
    /// Image `celscore_black`.
    static let celscore_black = ImageResource(bundle: _R.hostingBundle, name: "celscore_black")
    /// Image `celscore_green`.
    static let celscore_green = ImageResource(bundle: _R.hostingBundle, name: "celscore_green")
    /// Image `celscore_purple`.
    static let celscore_purple = ImageResource(bundle: _R.hostingBundle, name: "celscore_purple")
    /// Image `celscore_white`.
    static let celscore_white = ImageResource(bundle: _R.hostingBundle, name: "celscore_white")
    /// Image `consensus_green`.
    static let consensus_green = ImageResource(bundle: _R.hostingBundle, name: "consensus_green")
    /// Image `court_green`.
    static let court_green = ImageResource(bundle: _R.hostingBundle, name: "court_green")
    /// Image `court_small_white`.
    static let court_small_white = ImageResource(bundle: _R.hostingBundle, name: "court_small_white")
    /// Image `court_white`.
    static let court_white = ImageResource(bundle: _R.hostingBundle, name: "court_white")
    /// Image `db-profile-chevron`.
    static let dbProfileChevron = ImageResource(bundle: _R.hostingBundle, name: "db-profile-chevron")
    /// Image `error_green`.
    static let error_green = ImageResource(bundle: _R.hostingBundle, name: "error_green")
    /// Image `facebooklogo`.
    static let facebooklogo = ImageResource(bundle: _R.hostingBundle, name: "facebooklogo")
    /// Image `ic_add_black`.
    static let ic_add_black = ImageResource(bundle: _R.hostingBundle, name: "ic_add_black")
    /// Image `ic_add_green`.
    static let ic_add_green = ImageResource(bundle: _R.hostingBundle, name: "ic_add_green")
    /// Image `ic_add_purple`.
    static let ic_add_purple = ImageResource(bundle: _R.hostingBundle, name: "ic_add_purple")
    /// Image `ic_add_white`.
    static let ic_add_white = ImageResource(bundle: _R.hostingBundle, name: "ic_add_white")
    /// Image `ic_close_white`.
    static let ic_close_white = ImageResource(bundle: _R.hostingBundle, name: "ic_close_white")
    /// Image `ic_menu_white`.
    static let ic_menu_white = ImageResource(bundle: _R.hostingBundle, name: "ic_menu_white")
    /// Image `ic_search_white`.
    static let ic_search_white = ImageResource(bundle: _R.hostingBundle, name: "ic_search_white")
    /// Image `info_black`.
    static let info_black = ImageResource(bundle: _R.hostingBundle, name: "info_black")
    /// Image `info_green`.
    static let info_green = ImageResource(bundle: _R.hostingBundle, name: "info_green")
    /// Image `info_purple`.
    static let info_purple = ImageResource(bundle: _R.hostingBundle, name: "info_purple")
    /// Image `info_white`.
    static let info_white = ImageResource(bundle: _R.hostingBundle, name: "info_white")
    /// Image `passport_green`.
    static let passport_green = ImageResource(bundle: _R.hostingBundle, name: "passport_green")
    /// Image `road`.
    static let road = ImageResource(bundle: _R.hostingBundle, name: "road")
    /// Image `road_green`.
    static let road_green = ImageResource(bundle: _R.hostingBundle, name: "road_green")
    /// Image `score_black`.
    static let score_black = ImageResource(bundle: _R.hostingBundle, name: "score_black")
    /// Image `score_logo`.
    static let score_logo = ImageResource(bundle: _R.hostingBundle, name: "score_logo")
    /// Image `score_white`.
    static let score_white = ImageResource(bundle: _R.hostingBundle, name: "score_white")
    /// Image `spaceship_green`.
    static let spaceship_green = ImageResource(bundle: _R.hostingBundle, name: "spaceship_green")
    /// Image `star_black`.
    static let star_black = ImageResource(bundle: _R.hostingBundle, name: "star_black")
    /// Image `star_green`.
    static let star_green = ImageResource(bundle: _R.hostingBundle, name: "star_green")
    /// Image `star_icon`.
    static let star_icon = ImageResource(bundle: _R.hostingBundle, name: "star_icon")
    /// Image `star_purple`.
    static let star_purple = ImageResource(bundle: _R.hostingBundle, name: "star_purple")
    /// Image `telescope_green`.
    static let telescope_green = ImageResource(bundle: _R.hostingBundle, name: "telescope_green")
    /// Image `twitterlogo`.
    static let twitterlogo = ImageResource(bundle: _R.hostingBundle, name: "twitterlogo")
    /// Image `vote_black`.
    static let vote_black = ImageResource(bundle: _R.hostingBundle, name: "vote_black")
    /// Image `vote_green`.
    static let vote_green = ImageResource(bundle: _R.hostingBundle, name: "vote_green")
    /// Image `vote_purple`.
    static let vote_purple = ImageResource(bundle: _R.hostingBundle, name: "vote_purple")
    /// Image `vote_white`.
    static let vote_white = ImageResource(bundle: _R.hostingBundle, name: "vote_white")
    /// Image `worker_green`.
    static let worker_green = ImageResource(bundle: _R.hostingBundle, name: "worker_green")
    
    /// `UIImage(named: "astronaut_green", bundle: ..., traitCollection: ...)`
    static func astronaut_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.astronaut_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "celscore_black", bundle: ..., traitCollection: ...)`
    static func celscore_black(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.celscore_black, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "celscore_green", bundle: ..., traitCollection: ...)`
    static func celscore_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.celscore_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "celscore_purple", bundle: ..., traitCollection: ...)`
    static func celscore_purple(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.celscore_purple, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "celscore_white", bundle: ..., traitCollection: ...)`
    static func celscore_white(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.celscore_white, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "consensus_green", bundle: ..., traitCollection: ...)`
    static func consensus_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.consensus_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "court_green", bundle: ..., traitCollection: ...)`
    static func court_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.court_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "court_small_white", bundle: ..., traitCollection: ...)`
    static func court_small_white(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.court_small_white, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "court_white", bundle: ..., traitCollection: ...)`
    static func court_white(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.court_white, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "db-profile-chevron", bundle: ..., traitCollection: ...)`
    static func dbProfileChevron(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.dbProfileChevron, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "error_green", bundle: ..., traitCollection: ...)`
    static func error_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.error_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "facebooklogo", bundle: ..., traitCollection: ...)`
    static func facebooklogo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.facebooklogo, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_add_black", bundle: ..., traitCollection: ...)`
    static func ic_add_black(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_add_black, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_add_green", bundle: ..., traitCollection: ...)`
    static func ic_add_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_add_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_add_purple", bundle: ..., traitCollection: ...)`
    static func ic_add_purple(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_add_purple, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_add_white", bundle: ..., traitCollection: ...)`
    static func ic_add_white(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_add_white, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_close_white", bundle: ..., traitCollection: ...)`
    static func ic_close_white(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_close_white, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_menu_white", bundle: ..., traitCollection: ...)`
    static func ic_menu_white(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_menu_white, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_search_white", bundle: ..., traitCollection: ...)`
    static func ic_search_white(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_search_white, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "info_black", bundle: ..., traitCollection: ...)`
    static func info_black(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.info_black, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "info_green", bundle: ..., traitCollection: ...)`
    static func info_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.info_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "info_purple", bundle: ..., traitCollection: ...)`
    static func info_purple(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.info_purple, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "info_white", bundle: ..., traitCollection: ...)`
    static func info_white(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.info_white, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "passport_green", bundle: ..., traitCollection: ...)`
    static func passport_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.passport_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "road", bundle: ..., traitCollection: ...)`
    static func road(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.road, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "road_green", bundle: ..., traitCollection: ...)`
    static func road_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.road_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "score_black", bundle: ..., traitCollection: ...)`
    static func score_black(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.score_black, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "score_logo", bundle: ..., traitCollection: ...)`
    static func score_logo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.score_logo, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "score_white", bundle: ..., traitCollection: ...)`
    static func score_white(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.score_white, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "spaceship_green", bundle: ..., traitCollection: ...)`
    static func spaceship_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.spaceship_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "star_black", bundle: ..., traitCollection: ...)`
    static func star_black(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.star_black, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "star_green", bundle: ..., traitCollection: ...)`
    static func star_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.star_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "star_icon", bundle: ..., traitCollection: ...)`
    static func star_icon(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.star_icon, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "star_purple", bundle: ..., traitCollection: ...)`
    static func star_purple(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.star_purple, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "telescope_green", bundle: ..., traitCollection: ...)`
    static func telescope_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.telescope_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "twitterlogo", bundle: ..., traitCollection: ...)`
    static func twitterlogo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.twitterlogo, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "vote_black", bundle: ..., traitCollection: ...)`
    static func vote_black(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.vote_black, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "vote_green", bundle: ..., traitCollection: ...)`
    static func vote_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.vote_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "vote_purple", bundle: ..., traitCollection: ...)`
    static func vote_purple(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.vote_purple, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "vote_white", bundle: ..., traitCollection: ...)`
    static func vote_white(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.vote_white, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "worker_green", bundle: ..., traitCollection: ...)`
    static func worker_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.worker_green, compatibleWithTraitCollection: traitCollection)
    }
    
    private init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `LaunchScreen`.
    static let launchScreen = _R.nib._LaunchScreen()
    
    /// `UINib(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void) -> UINib {
      return UINib(resource: R.nib.launchScreen)
    }
    
    private init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    private init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    private init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 0 storyboards.
  struct storyboard {
    private init() {}
  }
  
  private init() {}
}

struct _R {
  static let hostingBundle = NSBundle(identifier: "com.GreyEcology.CelebrityScore") ?? NSBundle.mainBundle()
  
  struct nib {
    struct _LaunchScreen: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? UIView
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  struct storyboard {
    private init() {}
  }
  
  private init() {}
}