// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift

import Foundation
import Rswift
import UIKit

/// This `R` struct is code generated, and contains references to static resources.
struct R {
  /// This `R.color` struct is generated, and contains static references to 0 color palettes.
  struct color {
    private init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `TAOverlay.bundle`.
    static let tAOverlayBundle = FileResource(bundle: _R.hostingBundle, name: "TAOverlay", pathExtension: "bundle")
    
    /// `bundle.URLForResource("TAOverlay", withExtension: "bundle")`
    static func tAOverlayBundle(_: Void) -> NSURL? {
      let fileResource = R.file.tAOverlayBundle
      return fileResource.bundle.URLForResource(fileResource)
    }
    
    private init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    private init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 55 images.
  struct image {
    /// Image `anchor_green`.
    static let anchor_green = ImageResource(bundle: _R.hostingBundle, name: "anchor_green")
    /// Image `arrow_white`.
    static let arrow_white = ImageResource(bundle: _R.hostingBundle, name: "arrow_white")
    /// Image `astronaut_green`.
    static let astronaut_green = ImageResource(bundle: _R.hostingBundle, name: "astronaut_green")
    /// Image `celscore_big_white`.
    static let celscore_big_white = ImageResource(bundle: _R.hostingBundle, name: "celscore_big_white")
    /// Image `celscore_black`.
    static let celscore_black = ImageResource(bundle: _R.hostingBundle, name: "celscore_black")
    /// Image `celscore_green`.
    static let celscore_green = ImageResource(bundle: _R.hostingBundle, name: "celscore_green")
    /// Image `celscore_purple`.
    static let celscore_purple = ImageResource(bundle: _R.hostingBundle, name: "celscore_purple")
    /// Image `celscore_white`.
    static let celscore_white = ImageResource(bundle: _R.hostingBundle, name: "celscore_white")
    /// Image `cloud_green_big`.
    static let cloud_green_big = ImageResource(bundle: _R.hostingBundle, name: "cloud_green_big")
    /// Image `contract_green_big`.
    static let contract_green_big = ImageResource(bundle: _R.hostingBundle, name: "contract_green_big")
    /// Image `court_green`.
    static let court_green = ImageResource(bundle: _R.hostingBundle, name: "court_green")
    /// Image `court_small_white`.
    static let court_small_white = ImageResource(bundle: _R.hostingBundle, name: "court_small_white")
    /// Image `court_white`.
    static let court_white = ImageResource(bundle: _R.hostingBundle, name: "court_white")
    /// Image `cross`.
    static let cross = ImageResource(bundle: _R.hostingBundle, name: "cross")
    /// Image `facebooklogo`.
    static let facebooklogo = ImageResource(bundle: _R.hostingBundle, name: "facebooklogo")
    /// Image `geometry_green`.
    static let geometry_green = ImageResource(bundle: _R.hostingBundle, name: "geometry_green")
    /// Image `heart_black`.
    static let heart_black = ImageResource(bundle: _R.hostingBundle, name: "heart_black")
    /// Image `heart_green`.
    static let heart_green = ImageResource(bundle: _R.hostingBundle, name: "heart_green")
    /// Image `heart_purple`.
    static let heart_purple = ImageResource(bundle: _R.hostingBundle, name: "heart_purple")
    /// Image `heart_white`.
    static let heart_white = ImageResource(bundle: _R.hostingBundle, name: "heart_white")
    /// Image `ic_add_black`.
    static let ic_add_black = ImageResource(bundle: _R.hostingBundle, name: "ic_add_black")
    /// Image `ic_add_green`.
    static let ic_add_green = ImageResource(bundle: _R.hostingBundle, name: "ic_add_green")
    /// Image `ic_add_purple`.
    static let ic_add_purple = ImageResource(bundle: _R.hostingBundle, name: "ic_add_purple")
    /// Image `ic_add_white`.
    static let ic_add_white = ImageResource(bundle: _R.hostingBundle, name: "ic_add_white")
    /// Image `ic_close_white`.
    static let ic_close_white = ImageResource(bundle: _R.hostingBundle, name: "ic_close_white")
    /// Image `ic_menu_white`.
    static let ic_menu_white = ImageResource(bundle: _R.hostingBundle, name: "ic_menu_white")
    /// Image `ic_search_white`.
    static let ic_search_white = ImageResource(bundle: _R.hostingBundle, name: "ic_search_white")
    /// Image `info_black`.
    static let info_black = ImageResource(bundle: _R.hostingBundle, name: "info_black")
    /// Image `info_green`.
    static let info_green = ImageResource(bundle: _R.hostingBundle, name: "info_green")
    /// Image `info_purple`.
    static let info_purple = ImageResource(bundle: _R.hostingBundle, name: "info_purple")
    /// Image `info_white`.
    static let info_white = ImageResource(bundle: _R.hostingBundle, name: "info_white")
    /// Image `jurors_green_big`.
    static let jurors_green_big = ImageResource(bundle: _R.hostingBundle, name: "jurors_green_big")
    /// Image `mic_green`.
    static let mic_green = ImageResource(bundle: _R.hostingBundle, name: "mic_green")
    /// Image `mic_purple`.
    static let mic_purple = ImageResource(bundle: _R.hostingBundle, name: "mic_purple")
    /// Image `networkError`.
    static let networkError = ImageResource(bundle: _R.hostingBundle, name: "networkError")
    /// Image `nuclear_green`.
    static let nuclear_green = ImageResource(bundle: _R.hostingBundle, name: "nuclear_green")
    /// Image `nuclear_purple`.
    static let nuclear_purple = ImageResource(bundle: _R.hostingBundle, name: "nuclear_purple")
    /// Image `observatory_green`.
    static let observatory_green = ImageResource(bundle: _R.hostingBundle, name: "observatory_green")
    /// Image `passport_green`.
    static let passport_green = ImageResource(bundle: _R.hostingBundle, name: "passport_green")
    /// Image `planet_green`.
    static let planet_green = ImageResource(bundle: _R.hostingBundle, name: "planet_green")
    /// Image `score_black`.
    static let score_black = ImageResource(bundle: _R.hostingBundle, name: "score_black")
    /// Image `score_logo`.
    static let score_logo = ImageResource(bundle: _R.hostingBundle, name: "score_logo")
    /// Image `score_white`.
    static let score_white = ImageResource(bundle: _R.hostingBundle, name: "score_white")
    /// Image `spaceship_green`.
    static let spaceship_green = ImageResource(bundle: _R.hostingBundle, name: "spaceship_green")
    /// Image `spaceship_green_big`.
    static let spaceship_green_big = ImageResource(bundle: _R.hostingBundle, name: "spaceship_green_big")
    /// Image `sphere_green`.
    static let sphere_green = ImageResource(bundle: _R.hostingBundle, name: "sphere_green")
    /// Image `sphere_green_big`.
    static let sphere_green_big = ImageResource(bundle: _R.hostingBundle, name: "sphere_green_big")
    /// Image `star_black`.
    static let star_black = ImageResource(bundle: _R.hostingBundle, name: "star_black")
    /// Image `star_green`.
    static let star_green = ImageResource(bundle: _R.hostingBundle, name: "star_green")
    /// Image `star_icon`.
    static let star_icon = ImageResource(bundle: _R.hostingBundle, name: "star_icon")
    /// Image `star_purple`.
    static let star_purple = ImageResource(bundle: _R.hostingBundle, name: "star_purple")
    /// Image `topView`.
    static let topView = ImageResource(bundle: _R.hostingBundle, name: "topView")
    /// Image `twitterlogo`.
    static let twitterlogo = ImageResource(bundle: _R.hostingBundle, name: "twitterlogo")
    /// Image `Tyra`.
    static let tyra = ImageResource(bundle: _R.hostingBundle, name: "Tyra")
    /// Image `worker_green_big`.
    static let worker_green_big = ImageResource(bundle: _R.hostingBundle, name: "worker_green_big")
    
    /// `UIImage(named: "anchor_green", bundle: ..., traitCollection: ...)`
    static func anchor_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.anchor_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "arrow_white", bundle: ..., traitCollection: ...)`
    static func arrow_white(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.arrow_white, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "astronaut_green", bundle: ..., traitCollection: ...)`
    static func astronaut_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.astronaut_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "celscore_big_white", bundle: ..., traitCollection: ...)`
    static func celscore_big_white(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.celscore_big_white, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "celscore_black", bundle: ..., traitCollection: ...)`
    static func celscore_black(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.celscore_black, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "celscore_green", bundle: ..., traitCollection: ...)`
    static func celscore_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.celscore_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "celscore_purple", bundle: ..., traitCollection: ...)`
    static func celscore_purple(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.celscore_purple, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "celscore_white", bundle: ..., traitCollection: ...)`
    static func celscore_white(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.celscore_white, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "cloud_green_big", bundle: ..., traitCollection: ...)`
    static func cloud_green_big(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cloud_green_big, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "contract_green_big", bundle: ..., traitCollection: ...)`
    static func contract_green_big(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.contract_green_big, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "court_green", bundle: ..., traitCollection: ...)`
    static func court_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.court_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "court_small_white", bundle: ..., traitCollection: ...)`
    static func court_small_white(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.court_small_white, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "court_white", bundle: ..., traitCollection: ...)`
    static func court_white(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.court_white, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "cross", bundle: ..., traitCollection: ...)`
    static func cross(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.cross, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "facebooklogo", bundle: ..., traitCollection: ...)`
    static func facebooklogo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.facebooklogo, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "geometry_green", bundle: ..., traitCollection: ...)`
    static func geometry_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.geometry_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "heart_black", bundle: ..., traitCollection: ...)`
    static func heart_black(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.heart_black, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "heart_green", bundle: ..., traitCollection: ...)`
    static func heart_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.heart_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "heart_purple", bundle: ..., traitCollection: ...)`
    static func heart_purple(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.heart_purple, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "heart_white", bundle: ..., traitCollection: ...)`
    static func heart_white(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.heart_white, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_add_black", bundle: ..., traitCollection: ...)`
    static func ic_add_black(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_add_black, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_add_green", bundle: ..., traitCollection: ...)`
    static func ic_add_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_add_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_add_purple", bundle: ..., traitCollection: ...)`
    static func ic_add_purple(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_add_purple, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_add_white", bundle: ..., traitCollection: ...)`
    static func ic_add_white(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_add_white, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_close_white", bundle: ..., traitCollection: ...)`
    static func ic_close_white(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_close_white, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_menu_white", bundle: ..., traitCollection: ...)`
    static func ic_menu_white(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_menu_white, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "ic_search_white", bundle: ..., traitCollection: ...)`
    static func ic_search_white(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.ic_search_white, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "info_black", bundle: ..., traitCollection: ...)`
    static func info_black(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.info_black, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "info_green", bundle: ..., traitCollection: ...)`
    static func info_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.info_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "info_purple", bundle: ..., traitCollection: ...)`
    static func info_purple(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.info_purple, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "info_white", bundle: ..., traitCollection: ...)`
    static func info_white(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.info_white, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "jurors_green_big", bundle: ..., traitCollection: ...)`
    static func jurors_green_big(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.jurors_green_big, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "mic_green", bundle: ..., traitCollection: ...)`
    static func mic_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.mic_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "mic_purple", bundle: ..., traitCollection: ...)`
    static func mic_purple(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.mic_purple, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "networkError", bundle: ..., traitCollection: ...)`
    static func networkError(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.networkError, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "nuclear_green", bundle: ..., traitCollection: ...)`
    static func nuclear_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.nuclear_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "nuclear_purple", bundle: ..., traitCollection: ...)`
    static func nuclear_purple(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.nuclear_purple, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "observatory_green", bundle: ..., traitCollection: ...)`
    static func observatory_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.observatory_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "passport_green", bundle: ..., traitCollection: ...)`
    static func passport_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.passport_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "planet_green", bundle: ..., traitCollection: ...)`
    static func planet_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.planet_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "score_black", bundle: ..., traitCollection: ...)`
    static func score_black(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.score_black, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "score_logo", bundle: ..., traitCollection: ...)`
    static func score_logo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.score_logo, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "score_white", bundle: ..., traitCollection: ...)`
    static func score_white(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.score_white, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "spaceship_green", bundle: ..., traitCollection: ...)`
    static func spaceship_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.spaceship_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "spaceship_green_big", bundle: ..., traitCollection: ...)`
    static func spaceship_green_big(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.spaceship_green_big, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "sphere_green", bundle: ..., traitCollection: ...)`
    static func sphere_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.sphere_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "sphere_green_big", bundle: ..., traitCollection: ...)`
    static func sphere_green_big(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.sphere_green_big, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "star_black", bundle: ..., traitCollection: ...)`
    static func star_black(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.star_black, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "star_green", bundle: ..., traitCollection: ...)`
    static func star_green(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.star_green, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "star_icon", bundle: ..., traitCollection: ...)`
    static func star_icon(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.star_icon, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "star_purple", bundle: ..., traitCollection: ...)`
    static func star_purple(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.star_purple, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "topView", bundle: ..., traitCollection: ...)`
    static func topView(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.topView, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "twitterlogo", bundle: ..., traitCollection: ...)`
    static func twitterlogo(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.twitterlogo, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "Tyra", bundle: ..., traitCollection: ...)`
    static func tyra(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.tyra, compatibleWithTraitCollection: traitCollection)
    }
    
    /// `UIImage(named: "worker_green_big", bundle: ..., traitCollection: ...)`
    static func worker_green_big(compatibleWithTraitCollection traitCollection: UITraitCollection? = nil) -> UIImage? {
      return UIImage(resource: R.image.worker_green_big, compatibleWithTraitCollection: traitCollection)
    }
    
    private init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 1 nibs.
  struct nib {
    /// Nib `LaunchScreen`.
    static let launchScreen = _R.nib._LaunchScreen()
    
    /// `UINib(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void) -> UINib {
      return UINib(resource: R.nib.launchScreen)
    }
    
    private init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    private init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    private init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 0 storyboards.
  struct storyboard {
    private init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    private init() {}
  }
  
  private init() {}
}

struct _R {
  static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(NSLocale.init) ?? NSLocale.currentLocale()
  static let hostingBundle = NSBundle(identifier: "com.GreyEcology.CelebrityScore") ?? NSBundle.mainBundle()
  
  struct nib {
    struct _LaunchScreen: NibResourceType {
      let bundle = _R.hostingBundle
      let name = "LaunchScreen"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIView? {
        return instantiateWithOwner(ownerOrNil, options: optionsOrNil)[0] as? UIView
      }
      
      private init() {}
    }
    
    private init() {}
  }
  
  struct storyboard {
    private init() {}
  }
  
  private init() {}
}